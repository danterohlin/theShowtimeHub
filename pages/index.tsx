import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import getConfig from 'next/config'
import Sidebar from '../components/sidebar'
import Show from '../components/show'
import ShowPage from '../components/showPage'
import Header from '../components/header'
import { stringify } from 'querystring'

const { serverRuntimeConfig, publicRuntimeConfig } = getConfig()

interface ShowType {
  id: number,
  title: string,
  poster_path: string,
  overview: string,
  vote_average: number,
  genres: string,
}

export default function Home(initialData: any) {
  const [showsData, setShowsData] = useState([])
  const [showData, setShowData] = useState<ShowType>({ id: 0, title: "", poster_path: "", overview: "", vote_average: 0, genres: "" })
  const [current, setCurrent] = useState("All")

  useEffect(() => {
    setShowsData(initialData.trendingShowsData.results)
  }, [initialData])

  return (
    <>
      <Head>
        <title>The Showtime Hub</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"></link>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin='true' />
        <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@600;700&display=swap" rel="stylesheet" />
      </Head>
      <Header setShowsData={setShowsData} publicRuntimeConfig={publicRuntimeConfig} initialData={initialData.trendingShowsData.results} />
      <div className='bg-slate-800 w-full'>
        <div className='flex max-w-8xl m-auto'>
          <Sidebar setCurrent={setCurrent} current={current} setShowsData={setShowsData} publicRuntimeConfig={publicRuntimeConfig} />
          <main className="bg-slate-800  scrollbar-thin pr-2 scrollbar-thumb-sky-800 scrollbar-track-slate-700 h-[calc(100vh-69px)] w-full">
            {/* <div className='bg-slate-900 flex p-4 pb-0'><p className='cursor-pointer text-white font-medium bg-sky-600 px-2 flex-shrink rounded'>{current}</p></div> */}
            <div className='flex flex-wrap p-2 bg-slate-900'>
              {showsData.length > 1 ? showsData.map((show: any, i) => {
                if (!show.poster_path) {
                  return;
                } else {
                  return (
                    <Show
                      index={show.id}
                      title={show.title}
                      poster_path={show.poster_path}
                      overview={show.overview}
                      rating={show.vote_average}
                      genre_ids={show.genre_ids}
                      media_type={show.media_type}
                      genres={initialData.genreData.genres}
                      key={i}
                      publicRuntimeConfig={publicRuntimeConfig}
                      setShowData={setShowData}
                      setShowsData={setShowsData}
                    />
                  )
                }

              }) :
                <ShowPage
                  index={showData.id}
                  title={showData.title}
                  poster_path={showData.poster_path}
                  overview={showData.overview}
                  rating={showData.vote_average}
                  genres={showData.genres}
                  key={showData.id}
                  publicRuntimeConfig={publicRuntimeConfig}
                />
              }

            </div>
          </main>
        </div>
      </div>
    </>
  )
}

export async function getServerSideProps() {
  const trendingShowsRes = await fetch(`https://api.themoviedb.org/3/trending/all/day?api_key=${serverRuntimeConfig.apiKey}`);
  const trendingShowsData = await trendingShowsRes.json();
  const genresRes = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${serverRuntimeConfig.apiKey}&language=en-US`)
  const genreData = await genresRes.json()
  return {
    props: { trendingShowsData: trendingShowsData, genreData: genreData },
  }
}
